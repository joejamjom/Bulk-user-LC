({
    readFile: function(component, helper, file) {
        if (!file) return;
        console.log("file" + file.name);
        if (!file.name.match(/\.(csv||CSV)$/)) {
            return alert("only support csv files");
        } else {
            reader = new FileReader();
            reader.onerror = function errorHandler(evt) {
                switch (evt.target.error.code) {
                    case evt.target.error.NOT_FOUND_ERR:
                        alert("File Not Found!");
                        break;
                    case evt.target.error.NOT_READABLE_ERR:
                        alert("File is not readable");
                        break;
                    case evt.target.error.ABORT_ERR:
                        break; 
                    default:
                        alert("An error occurred reading this file.");
                }
            };
            reader.onabort = function(e) {
                alert("File read cancelled");
            };
            reader.onloadstart = function(e) {
                var output =
                    '<ui type="disc"><li><strong>' +
                    file.name +
                    "</strong> (" +
                    file.type +
                    ")- " +
                    file.size +
                    "bytes, last modified: " +
                    file.lastModifiedDate.toLocaleDateString() +
                    "</li></ui>";
                component.set("v.filename", file.name);
                component.set("v.TargetFileName", output);
            };
            reader.onload = function(e) {
                var data = e.target.result;
                component.set("v.fileContentData", data);
                console.log("file data" + JSON.stringify(data));
                var allTextLines = data.split(/\r\n|\n/);
                var dataRows = allTextLines.length - 1;
                var headers = allTextLines[0].split(",");
                
                console.log("Rows length::" + dataRows);
                
                var numOfRows = component.get("v.NumOfRecords");
                // if(dataRows > numOfRows+1 || dataRows == 1 || dataRows== 0){
                if (dataRows == 0) {
                    alert("File Rows between 1 to " + numOfRows + " .");
                    component.set("v.showMain", true);
                } else {
                    var lines = [];
                    var filecontentdata;
                    var content =
                        '<table class="table slds-table slds-table--bordered slds-table--cell-buffer">';
                    content += '<thead><tr class="slds-text-title--caps">';
                    for (i = 0; i < headers.length; i++) {
                        content += '<th scope="col">' + headers[i] + "</th>";
                    }
                    content += "</tr></thead>";
                    for (var i = 1; i < allTextLines.length; i++) {
                        filecontentdata = allTextLines[i].split(",");
                        if (filecontentdata[0] != "" || filecontentdata[1] != "" 
                            || filecontentdata[2] != "" || filecontentdata[3] != "") {
                            content += "<tr>";
                            
                            for (var j = 0; j < filecontentdata.length; j++) {
                                content += "<td>" + filecontentdata[j] + "</td>";
                            }
                            content += "</tr>";
                        }
                    }
                    content += "</table>";
                    
                    component.set("v.TableContent", content);
                    component.set("v.showMain", false);
                }
            };
            reader.readAsText(file);
        }
        var reader = new FileReader();
        reader.onloadend = function() {};
        reader.readAsDataURL(file);
    },
    
    saveRecords: function(component, event) {
        var action = component.get("c.processData");
        var fieldsList = [
            "Job_Function__c",
            "Email",
            "FirstName",
            "LastName",
            "username",
            "Alias",
            "TimeZoneSidKey",
            "localesidkey",
            "emailencodingkey",
            "profileid",
            "userroleid",
            "LanguageLocaleKey"
        ]; 
        action.setParams({
            fileData: component.get("v.fileContentData"),
            sobjectName: "User", 
            fields: fieldsList
        });
        
        
        
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS") {
                
                component.set("v.ToBeUpdated", response.getReturnValue()[0]);
                component.set("v.ToBeInserted", response.getReturnValue()[1]);
                component.set("v.wrongValues", response.getReturnValue()[2]);
                component.set("v.LockedJF", response.getReturnValue()[3]);

                if(component.get("v.LockedJF.showList")){
                    component.set("v.showMain",false);
                    component.set("v.showResults",false);
                    component.set("v.showLocked",true);
                }
                
                else{
                    component.set("v.showMain",false);
                    component.set("v.showResults",true);
                    component.set("v.showLocked",false);
                   
                }
            
            } else if (state === "INCOMPLETE") {
                alert("Something went wrong");
            } else if (state === "ERROR") {
                
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        console.log("Error message: " + errors[0].message);
                        alert("Error message: " + errors[1].message);
                    }
                } else {
                    alert("unkown error");
                    console.log("Unknown error");
                }
            }
        });
        $A.enqueueAction(action);
    },
    
    CallApexFunction: function(component, event, isIncluded, TBI, TBU, LJF) {
        var action = component.get("c.RunUpsert");
        
        action.setParams({
            isIncluded: isIncluded,
            TBI:TBI,
            TBU:TBU,
            LJF:LJF
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            
            if (state === "SUCCESS") {
               
                component.set("v.showMain",false);
                component.set("v.showResults",true);
                component.set("v.showLocked",false);
            }
            
            else if (state === "INCOMPLETE") {
                alert("INCOMPLETE: Something went wrong");
            } 
                else if (state === "ERROR") {
                    var errors = response.getError();
                    if (errors) {
                        if (errors[0] && errors[0].message) {
                            alert("Error message: " + errors[0].message);
                        }
                    } else {
                        alert("Unknown error");
                    }
                }            
        });
        $A.enqueueAction(action);
    } 
    
});
